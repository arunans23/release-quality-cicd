name: Ensuring Release Quality Pipeline
variables:
  python.version: '3.7.6'

# Deploy the infrastructure needed for the release
stages:
- stage: Prepare
  jobs:
  - job: deploy_infrastructure
    displayName: Deploy Infrastructure
    # Using Self Hosted Agent
    pool:
      name: 'MyAgentPool'
    steps:
    # Download Terraform tfvar file from a secure location
    - task: DownloadSecureFile@1
      name: tfvarFile
      displayName: Fetch terraform variables
      inputs:
        secureFile: 'terraform.tfvars' 

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtmLzDz3yP62WZu1BDD8uMaXrC0KTf2a+MxTfkjopz7Bsx1NrTWpjD7zO5R5zRpT4RPwIEAjN1t35FWLCQtYOfydLnBv3P4jiJ6H/5oe8Oj5rgnVXGi29XtuNQEx5JASPcjN5xkpAM0kOUK7ajVMq17q5o4StHuvKSDZ+ooUxa/h+wV6v/6Id9de2V8fPRArO4/X8Ruklwy5GOXSckkRKo0Jl3G2FfqAT5aUr2/G+LWiIaWqF+PKDzUvV3/3+xXVKt8/+xobeQupytMZn8jXznTnu7Fb0WQgl2fGrFnCDMG5YKomva0841s+R8EWCbAx1dyl70VRetjVsG6PPbKf7rrZG8iPkSiqYYcwgieDwDT/uhVVkBJ6rL4yJNOuJPDkw0IJpm5LlfxOoKWDgA0y96dKIPPSBZKEfQ/KjyZ9VHp1ZHm8diyweYn1TVhSV1saEzA5c1EW4YK6gs/ao8buoFPmEi/XoAGJWC3ulJy7ZR8Ay/dcHJdyZQiIBdX/tfxqU= arunan@Arunan'
        sshKeySecureFile: 'udacity_azure'

    # Adding the Terraform variable file to the workspae
    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform variables

    # Install terraform
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.5'

    # Init terraform
    - task: TerraformTaskV1@0
      displayName: Initialize Terraform
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'azurerm-sc'
        backendAzureRmResourceGroupName: 'nauran-devops'
        backendAzureRmStorageAccountName: 'naurandevopsstorage'
        backendAzureRmContainerName: 'devops-storage-container'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Create infrastructure from Terraform
    - task: TerraformTaskV1@0
      displayName: Create Infrastructure
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve 
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc'

# Create the artifacts
- stage: Build
  jobs:
  - job: create_artifacts
    displayName: Create Artifacts
    # Using Self Hosted Agent
    pool:
      name: 'MyAgentPool'
    steps:

    # Archive FakeRestAPI files
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true

    # Publish FakeRestAPI files
    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    # Archive Selenium files
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true

    # Publish Selenium files
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deployment
  jobs:
  - deployment: deploy_webapp
    displayName: Deploy FakeRestAPI
    # Using Self Hosted Agent
    pool:
      name: 'MyAgentPool'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'azurerm-sc1'
              appName: 'devops-terraform-application-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy

  - deployment: deploy_selenium
    displayName: Deploy Selenium
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-get install software-properties-common -y
              sudo apt-add-repository universe -y
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              # Install Log Analytics agent on Linux computers (only need to run once)
              # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
              # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
              # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
            env:  # To use secret variables in a script, we must explicitly map them as environment variables.
              AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
            displayName: Configure selenium

- stage: Test
  jobs:
  - deployment: test_selenium
    displayName: Test with Selenium
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete
              unzip -o selenium-$(Build.BuildId).zip
              sudo mkdir -p /var/log/selenium
              sudo chmod 664 /var/log/selenium
              sudo python3 -u selenium-test.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            displayName: Test with Selenium
          - task: PublishPipelineArtifact@1
            displayName: Publish selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'

  - job: test_jmeter
    displayName: Test with JMeter
    # Using Self Hosted Agent
    pool:
      name: 'MyAgentPool'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx \
                                     -l log/jmeter/stress-test-result.csv \
                                     -e -f -o log/jmeter/stress-test-html-report \
                                     -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter stress test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx \
                                     -l log/jmeter/endurance-test-result.csv \
                                     -e -f -o log/jmeter/endurance-test-html-report \
                                     -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter endurance test
    - task: ArchiveFiles@2
      displayName: Archive JMeter stress test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Archive JMeter endurance test HTML report
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - bash: |
        rm -rf log/jmeter/stress-test-html-report
        rm -rf log/jmeter/endurance-test-html-report
        cd log/jmeter
        pwd
        ls -la
      displayName: Delete original JMeter test HTML reports
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter-logs'

  - job: test_newman
    displayName: Test with Postman
    # Using Self Hosted Agent
    pool:
      name: 'MyAgentPool'
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman
        newman --version
        # create log directory
        mkdir -p log/newman
        pwd
        ls -la
      displayName: Install Newman
    - bash: |
        newman run automatedtesting/postman/regression-test.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/regression-test.xml \
                   --suppress-exit-code
      displayName: Newman regression test
    - bash: |
        newman run automatedtesting/postman/validation-test.json \
                   -e automatedtesting/postman/validation-test-env.postman-environment.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/validation-test.xml \
                   --suppress-exit-code
        ls -la $(System.DefaultWorkingDirectory)/log/newman/
      displayName: Newman validation test
    - task: PublishPipelineArtifact@1
      displayName: Publish Newman logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
        artifactName: 'drop-newman-logs'
    - task: PublishTestResults@2
      displayName: 'Publish Newman test results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Publish Newman test results'